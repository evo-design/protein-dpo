[tool.poetry]
name = "protein-scoring"
version = "0.1.0"
description = "Protein sequence scoring and sampling using ESM models"
authors = ["Your Name <your.email@example.com>"]
readme = "README.md"
packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.9"
torch = "^2.1.2"
torchvision = "^0.16.2"
torchaudio = "^2.1.2"
pytorch-lightning = "^2.1.3"
torchmetrics = "^1.2.1"
numpy = "^1.26.3"
pandas = "^2.1.4"
scipy = "^1.11.4"
scikit-learn = "^1.3.2"
matplotlib = "^3.8.2"
seaborn = "^0.13.1"
opencv-python = "^4.9.0.80"
pillow = "^10.0.1"
tqdm = "^4.66.1"
pyyaml = "^6.0.1"
requests = "^2.31.0"
click = "^8.1.7"
joblib = "^1.3.2"
h5py = "^3.10.0"
lxml = "^5.1.0"
biopython = "^1.83"
biotite = "^0.39.0"
# ESM and related dependencies
fair-esm = {git = "https://github.com/facebookresearch/esm.git"}
# Other scientific computing
iminuit = "^2.25.2"
numexpr = "^2.8.8"
tables = "^3.9.2"
# Utilities
python-dotenv = "^1.0.0"
psutil = "^5.9.7"
tabulate = "^0.9.0"
natsort = "^8.4.0"
# Machine learning frameworks
hydra-core = "^1.0.7"
omegaconf = "^2.0.6"
wandb = "^0.16.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.1"
pytest-xdist = "^3.3.1"
pytest-timeout = "^2.1.0"
black = "^23.7.0"
flake8 = "^6.0.0"
mypy = "^1.5.0"
isort = "^5.12.0"
pre-commit = "^3.4.0"

[tool.poetry.scripts]
test = "pytest:main"
tests = "pytest:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-branch",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
    "*_test.py",
]
python_classes = [
    "Test*",
]
python_functions = [
    "test_*",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "slow: Slow tests that take significant time",
    "gpu: Tests that require GPU",
    "network: Tests that require network access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
timeout = 300

[tool.coverage.run]
source = ["src", "."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "*/venv/*",
    "*/.venv/*",
    "setup.py",
    "conftest.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true